/**
 * Types for the technology currency scanning system
 */

/**
 * Base interface for scanner results with common fields
 */
export interface ScannerResult {
  id: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  detectedAt: Date;
}

/**
 * Represents an outdated dependency detected by the dependency scanner
 */
export interface OutdatedDependency extends ScannerResult {
  name: string;
  packageManager: string;
  currentVersion: string;
  latestVersion: string;
  versionsBehind: {
    major: number;
    minor: number;
    patch: number;
  };
  releaseDate: Date | null;
  path: string;
  isDirectDependency: boolean;
  remediationSteps: string;
}

/**
 * Represents a security vulnerability detected by the security scanner
 */
export interface SecurityVulnerability extends ScannerResult {
  packageName: string;
  packageVersion: string;
  vulnerabilityId: string;
  title: string;
  description: string;
  cvss: number;
  fixedInVersion: string;
  path: string;
  remediationSteps: string;
  references: string[];
}

/**
 * Represents an issue with a browser extension
 */
export interface ExtensionIssue extends ScannerResult {
  browser: string;
  extensionId: string;
  extensionName: string;
  extensionVersion: string;
  issueType: 'deprecated-api' | 'security-vulnerability' | 'compatibility' | 'end-of-life';
  title: string;
  description: string;
  remediationSteps: string;
}

/**
 * Represents a technology lifecycle event (e.g., approaching EOL date)
 */
export interface LifecycleEvent extends ScannerResult {
  technologyName: string;
  technologyVersion: string;
  technologyType: 'language' | 'framework' | 'library' | 'runtime' | 'os' | 'database' | 'hardware';
  currentPhase: 'active' | 'maintenance' | 'security-only' | 'end-of-life' | 'deprecated';
  phaseStartDate: Date;
  phaseEndDate: Date;
  daysUntilNextPhase: number;
  nextPhase: 'maintenance' | 'security-only' | 'end-of-life';
  description: string;
  remediationSteps: string;
  officialDocumentationUrl: string;
}

/**
 * Represents an item in a technical debt report
 */
export interface TechnicalDebtItem extends ScannerResult {
  category: 'outdated-dependency' | 'security-vulnerability' | 'deprecated-api' | 'end-of-life' | 'legacy-technology';
  name: string;
  description: string;
  affectedComponents: string[];
  estimatedRefactoringEffort: 'low' | 'medium' | 'high';
  estimatedRiskOfDelay: 'low' | 'medium' | 'high';
  businessImpact: 'low' | 'medium' | 'high';
  remediationSteps: string;
  estimatedCost?: number;
  estimatedTimeToRemediateHours?: number;
}

/**
 * Represents an attempted commit with outdated dependencies or technologies
 */
export interface OutdatedCommitAlert {
  id: string;
  repositoryName: string;
  branchName: string;
  commitSha: string;
  developerName: string;
  developerEmail: string;
  timestamp: Date;
  filesChanged: string[];
  outdatedDependencies: Array<{
    name: string;
    currentVersion: string;
    recommendedVersion: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
  }>;
  blockCommit: boolean;
  warningMessage: string;
}

/**
 * The full report generated by the technology currency scanning system
 */
export interface TechnologyCurrencyReport {
  id: string;
  timestamp: Date;
  summary: {
    totalOutdatedDependencies: number;
    totalSecurityVulnerabilities: number;
    totalExtensionIssues: number;
    totalLifecycleEvents: number;
    totalTechnicalDebtItems: number;
    criticalIssuesCount: number;
    highIssuesCount: number;
    mediumIssuesCount: number;
    lowIssuesCount: number;
    estimatedTotalRemediationHours: number;
  };
  topIssuesByImpact: Array<ScannerResult>;
  teamAssignments: Record<string, Array<ScannerResult>>;
  outdatedDependencies: OutdatedDependency[];
  securityVulnerabilities: SecurityVulnerability[];
  extensionIssues: ExtensionIssue[];
  lifecycleEvents: LifecycleEvent[];
  technicalDebtItems: TechnicalDebtItem[];
  remediationRoadmap: Array<{
    quarter: string;
    plannedRemediations: Array<{
      itemId: string;
      name: string;
      priority: 'critical' | 'high' | 'medium' | 'low';
      assignedTeam: string;
      estimatedCompletionDate: Date;
    }>;
  }>;
}
